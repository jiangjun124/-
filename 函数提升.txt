函数的声明有两种：1.function 函数名(形参) {
					函数体
				} 
                                2.var 函数名 = function(形参){
                                                                              函数体
				}
其中第一种的优先级最高会被提升到最前面，无论怎么写，都是在最前面，
然后第二种会被拆开，例如 2.var 函数名 = function(形参){
                                                                              函数体
				}
                                 会被拆成    var  函数名；                           这个会被提升到仅次于第一种优先级的地方
                                                   函数名 =function(形参){         这个部分会留在原地
                                                                      函数体
                                                                }
接着剩下的原先代码在哪里，他们就在哪里不要动；
------------------------------------------------------
一个通用的例子	
               var xpf = function(){          //这是第二种，你对比下是不是，然后   var xpf;  会与 xpf=function{
                       console.log(2);                                                                                               console.log(2);
                      }                                                                                                                 }  拆开，然后var xpf ;放在仅次于第一种声明的下面
	function xpf (){

	    console.log(1);            //这是第一种，但是在运行的时候会被放在最上面
	}
	xpf();

最后编译的时候就会变成
    function xpf(){
  		console.log(1);    //第一种
  	}
  	var xpf;                                //第二种  var   xpf：
  	xpf = function(){                  剩下的停留在原地；
  		console.log(2);
  	}
  	xpf();
最后按照提升后的顺序运行



var znn = function(){
    console.log(1);
}
function znn(){
    console.log(2);
}
znn();

编译时就会变成
function znn(){
    console.log(2);
}
var znn;
znn = function(){
    console.log(1);
}
znn();